const express = require('express');
const router = express.Router();
const Owner = require('../models/Owner');

// Step 1: Create a new owner with personal details
router.post('/step1', async (req, res) => {
  try {
    const { travelName, pincode, state, city, phone, email, name, country, district } = req.body;
    const newOwner = new Owner({
      travelName,
      pincode,
      state,
      city,
      phone,
      email,
      name,
      country,
      district,
    });

    const savedOwner = await newOwner.save();

    // Return the saved owner ID or any other relevant information for the frontend
    res.json({ ownerId: savedOwner._id });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Error creating owner in Step 1' });
  }
});

module.exports = router;




// routes/ownerRoutes.js

// ... (previous imports)

// Step 2: Update owner with additional data for Step 2 (Bank Details)
router.post('/step2/:ownerId', async (req, res) => {
  try {
    const ownerId = req.params.ownerId;
    const { bankName, accountNumber, beneficaryName, bankaccountType, citizenshipNumber } = req.body;

    const updatedOwner = await Owner.findByIdAndUpdate(
      ownerId,
      { bankName, accountNumber, beneficaryName, bankaccountType, citizenshipNumber },
      { new: true }
    );

    // Return any relevant information for the frontend
    res.json({ updatedOwner });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Error updating owner in Step 2' });
  }
});

module.exports = router;




// routes/ownerRoutes.js

// ... (previous imports)

// Step 3: Update owner with additional data for Step 3 (Pan Card Details)
router.post('/step3/:ownerId', async (req, res) => {
  try {
    const ownerId = req.params.ownerId;
    const { panName, panAddress, issuedate, dateofbirth } = req.body;

    const finalOwner = await Owner.findByIdAndUpdate(
      ownerId,
      { panName, panAddress, issuedate, dateofbirth },
      { new: true }
    );

    // Return any relevant information for the frontend
    res.json({ finalOwner });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Error updating owner in Step 3' });
  }
});

module.exports = router;



{
    "ownerId": "656443e6d29e68f7f509c33d",
    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwaG9uZSI6Iis5Nzc5ODQ1MjM2OTY2IiwiaWF0IjoxNzAxMDY5ODI5LCJleHAiOjE3MDEwOTE0Mjl9.FLepTRd-jDTvCH8lOdzULmZNCYrC9CJTd2z_Qah7FlU"
}



{
  "price": "1000", // Replace with the actual price
  "passengers": 2,
  "passengerName": "John Doe", // Replace with the actual passenger name
  "seatNumbers": ["1A", "1B"],
  "boardingPoints": "Boarding Point A", // Replace with the actual boarding point
  "ticketNumber": "123456", // Replace with a unique ticket number
  "verification": "notverified", // You can set the default verification status or update it as needed
  // Other fields specific to your schema or requirements

  // Assuming you have an authentication token for the logged-in user
  // Include the token in the headers for user authentication
  "headers": {
    "Authorization": "Bearer your_user_token_here"
  }
}
{
  "price": "1000", 
  "passengers": 1,
  "passengerName": "John Doe", 
  "seatNumbers": ["1A", "1B"],
  "boardingPoints": "Boarding Point A", 
   "droppingPoints":"Dropping Point D"
}




npm install express-rate-limit
const express = require('express');
const rateLimit = require('express-rate-limit');

const app = express();




// Apply rate limiting middleware
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // limit each IP to 100 requests per windowMs
  message: 'Too many requests from this IP, please try again later.',
});

app.use(limiter);

// ... your other middleware and routes ...

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
