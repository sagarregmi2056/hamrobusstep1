PROJECT NAME : HAMRO BUS TICKET BOOKING SYSTEM
:our freelance community nepal (backend:sagarregmi ,lead: purusotam pokhrel ,frontend:rakesh giri ,designer:  )




 PURPOSE:
.provide a bus ticket booking application
 where user can book a ticket and bus owner can post a bus ticket .



 UsersType:
 1.Normal user 
 2.Bus owner 
 3.ADMIN 




 USAGE: 
 we are hitting the api through http request of flutter based application .(Mobile,web app)

 version: 
 V1 



 Tech stack :
  Nodejs,Mongodb cluster(shared for testing),Graphql server (apollo)


  Model schema : 

 1. NormalUSER:
     *name : name of user for profile info at top as well as for ticket
     address :
     *email
     *info : if more info required
     *phone : 
     *hashedPassword:

     *isVerified :


     ** note    :while using google auth and facebook auth we need to add emailID: to the schema 


 2.Travel:
  *name


3.Owner :
*name :
*citizenshipNumber: for better verification 
*phone:
*isVerified: is verified can only be set by the superadmin 
*email
*hashed_password
*photo: photo of pan card or registerd company verification
*salt:
*role:["owner" or  "superadmin"], default: "owner"





 



4.location schema :

*name : (eg.bharatpur 14)
*district: (eg.Chitwan) this location schema can be used for location of bus and user owner any .





5.guestSchema :
*name,address,email,phone 



6.busSchema:  
*name : (eg. makalu yatayat)
*type:  (eg.ac ,nonac,sleeper,seater )
enum: ["AC", "Nonac", "sleeper", "seater", "if required add more "]
* busNumber : (eg.platenumber)
* fare : (gadi vada 400,500,900)
*features:
*description: 
*seatsAvailable
*bookedSeat:
*soldSeat
* numberOfSeats
*image : (image of bus can or cannot be provided)
*departure_time:String (string because easy to add to mongodb and understand)
*isAvailable
*travel (eg juntara travels)
*startLocation (eg.chitwan)
* endLocation (eg.kathmandu)
* journeyDate
*  owner  (1 owner can have many bus :1:M relationships)
*boardingPoints
*droppingPoints
*slug :  (slug is a URL-friendly representation of a string, often used in web applications to create human-readable and SEO-friendly URLs)




7.bookingSchema:

*price:
 *passengers
 *seatNumber
 *boardingPoints
 *guest
 * user
 *owner:
 *bus
 *self
 * verification: {
      type: String,
      enum: ["verified", "notverified", "payed"],
      default: "notverified"
    }






    Api endpoints 

    1.auth-user/signup =>         http://localhost:8525/api/auth-user/signup
    2.auth-user/signin=>          http://localhost:8525/api/auth-user/signup
    3./api/users/getallusers=>    http://localhost:8525/api/users/
    4.getuserByid =>              http://localhost:8525/api/users/64d6459a6ef628df9a5db782
     5. owner signup=> http://localhost:8525/api/auth-owner/signup



      {
  "name": "abcdefghti",
  "citizenshipNumber": "1234567890",
  "phone": 9876543210,
  "email": "abcdefghi@example.com",
  "password": "123456",
  "photo": "profile.jpg"
}
{
  "name": "sagar regmi",
  "citizenshipNumber": "1234567890",
  "phone": 9876543210,
  "email": "sagarregmi2056@example.com",
  "password": "sagarregmi123",
 
}





1. owner signin => http://localhost:8525/api/auth-owner/signin


   {
  
  "email": "abcdefghi@example.com",
  "password": "123456"

}

token for that owner :


eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NGQ5ZTYxN2Q4ZWFmYzRhY2FjODk3MWMiLCJuYW1lIjoiYWJjZGVmZ2h0aSIsImVtYWlsIjoiYWJjZGVmZ2hpQGV4YW1wbGUuY29tIiwicm9sZSI6Im93bmVyIiwicmVmcmVzaF9oYXNoIjoiY2I0NDk4MTAtM2E3Yy0xMWVlLWJlYWItNjNmNDM3YWFjYmY2IiwiYXZhdGFyIjoicHJvZmlsZS5qcGciLCJpYXQiOjE2OTIwMDE4OTAsImV4cCI6MTY5MjAwOTA5MH0.j666MNVWylLWmBUSl9pQ4lex4rxQY2KtlMeHUpoTSu0




token for superadmin:
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NGQ1ZjE4Mzk4ZWJjMmJhYzYzMWU0M2QiLCJuYW1lIjoiU0FkbWluIiwiZW1haWwiOiJoYW1yb2J1czIwMjNAYWRtaW4uY29tIiwicm9sZSI6InN1cGVyYWRtaW4iLCJyZWZyZXNoX2hhc2giOiIzZmM4MWVlMC0zODIxLTExZWUtYWUwMS1lNzA4OTdiOWVkZWEiLCJhdmF0YXIiOm51bGwsImlhdCI6MTY5MjAwMzQ1NCwiZXhwIjoxNjkyMDEwNjU0fQ.6SciCXT7mJUd5Kmw8eASBwutbfQtdOhoLVzb7YspxAo



after superadmintoken:
addlocation=>  http://localhost:8525/api/locations


inputs with token:
 {
  "name": "chitwan",
  "district": "muglin"
}



outputs:
 {
    "name": "chitwan",
    "district": "muglin",
    "_id": "64d9ee02f712ba2fe20ae366",
    "__v": 0
}



addtravels => http://localhost:8525/api/travels

{
  "name":"makalu yatayat"
}



output:

{
    "name": "juntara yatayat",
    "_id": "64da000a931b4de4e06a3623",
    "__v": 0
}



<!-- // mongoose.plugin(slug);

// this is causing the error while using .. -->

addbus by the owner => step1: generate token and use token in barer token header 
                          step2: fill the form data 
                        =>  http://localhost:8525/api/bus

                        output:
                        {
    "name": "AC Deluxe Bus",
    "type": "AC",
    "busNumber": "BUS456",
    "fare": 1500,
    "features": [
        "Wi-Fi,Refreshments,Comfortable Seats"
    ],
    "description": "A luxurious AC deluxe bus",
    "seatsAvailable": 30,
    "bookedSeat": [],
    "soldSeat": [],
    "numberOfSeats": 30,
    "image": "busimage/resized/image-1692017458388.png",
    "departure_time": "09:00 AM",
    "isAvailable": true,
    "travel": "64da000a931b4de4e06a3623",
    "startLocation": "64d9edb7f712ba2fe20ae35a",
    "endLocation": "64d9edd1f712ba2fe20ae35d",
    "journeyDate": "2023-08-20",
    "boardingPoints": [
        "Boarding Point A",
        "Boarding Point B"
    ],
    "droppingPoints": [
        "Dropping Point X",
        "Dropping Point Y"
    ],
    "_id": "64da2332b79aa236fe2f04ed",
    "owner": {
        "_id": "64d5f18398ebc2bac631e43d",
        "name": "SAdmin",
        "hashed_password": "f4e227c6c0e4b4fdfabcba8b7ebdaa7316a20844",
        "salt": "3fc81ee0-3821-11ee-ae01-e70897b9edea",
        "role": "superadmin"
    },
    "createdAt": "2023-08-14T12:50:58.482Z",
    "updatedAt": "2023-08-14T12:50:58.482Z",
    "__v": 0
}